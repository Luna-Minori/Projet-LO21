fonction InitNeurone(poids ← poids, seuil ← seuil, n_Entry ← n_Entry) : Neurone
    Entrées :
    - poids : tableau d'entiers représentant les poids des connexions (taille : n_Entry)
    - seuil : entier représentant le seuil de sortie du neurone
    - n_Entry : entier représentant le nombre d'entrées du neurone

    Résultat : 
    - Un pointeur vers un objet Neurone initialisé avec les poids, seuil et nombre d'entrées

    Lexique :
    - neurone : pointeur vers le neurone initialisé
    - poids : tableau des poids associés aux entrées du neurone
    - seuil : seuil de sortie du neurone
    - n_Entry : nombre d'entrées du neurone
    - i : index utilisé pour parcourir le tableau des poids

    neurone ← allocation mémoire pour Neurone
    neurone.nombre_entrees ← n_Entry
    neurone.poids ← allocation mémoire pour n_Entry * Entier
    pour i = 0 à n_Entry - 1 faire
        neurone.poids[i] ← poids[i]
    fin pour
    neurone.seuil ← seuil
    neurone.suivant ← NULL
    neurone.precedent ← NULL
    InitNeurone ← neurone
fin fonction

---

fonction InitCouche(nombre_neurones ← nombre_neurones, n_Entry ← n_Entry, poids ← poids, seuil ← seuil) : Coucheneurone
    Entrées :
    - nombre_neurones : entier représentant le nombre de neurones dans la couche
    - n_Entry : entier représentant le nombre d'entrées pour chaque neurone
    - poids : tableau de tableaux d'entiers représentant les poids des neurones
    - seuil : tableau d'entiers représentant les seuils des neurones

    Résultat : 
    - Un pointeur vers une structure Coucheneurone représentant la couche initialisée

    Lexique :
    - couche : pointeur vers la couche initialisée
    - neurone : pointeur vers un neurone individuel
    - poids : tableau de poids pour chaque neurone
    - seuil : tableau de seuils pour chaque neurone
    - n_Entry : nombre d'entrées pour chaque neurone
    - i : index utilisé pour parcourir les neurones

    couche ← allocation mémoire pour Coucheneurone
    couche.nombre_neurones ← nombre_neurones
    neurone ← NULL

    pour i = 0 à nombre_neurones - 1 faire
        new ← InitNeurone(poids[i], seuil[i], n_Entry)
        si i = 0 alors
            couche.debutN ← new
        sinon
            neurone.suivant ← new
            new.precedent ← neurone
        fin si
        neurone ← new
    fin pour

    couche.finN ← neurone
    couche.suivante ← NULL
    couche.precedente ← NULL
    InitCouche ← couche
fin fonction

---

fonction OutNeurone(neurone ← neurone, Entry ← Entry) : Entier
    Entrées :
    - neurone : pointeur vers un neurone dont la sortie doit être calculée
    - Entry : tableau d'entiers représentant les entrées pour le neurone

    Résultat :
    - Retourne 1 si la somme des entrées pondérées est supérieure ou égale au seuil du neurone, sinon retourne 0

    Lexique :
    - neurone : neurone dont la sortie est calculée
    - valeur : somme des produits des entrées et de leurs poids
    - seuil : seuil du neurone pour déterminer la sortie
    - i : index utilisé pour parcourir les entrées

    valeur ← 0
    pour i = 0 à neurone.nombre_entrees - 1 faire
        valeur ← valeur + neurone.poids[i] * Entry[i]
    fin pour

    si valeur ≥ neurone.seuil alors
        OutNeurone ← 1
    fin si
    OutNeurone ← 0
fin fonction

---

fonction OutCouche(couche ← couche, Entry ← Entry) : Entier*
    Entrées :
    - couche : pointeur vers la couche dont les neurones produisent des sorties
    - Entry : tableau d'entiers représentant les entrées pour la couche

    Résultat :
    - Retourne un tableau d'entiers représentant les sorties des neurones de la couche

    Lexique :
    - couche : couche contenant plusieurs neurones
    - sorties : tableau des sorties des neurones
    - tempN : pointeur temporaire utilisé pour parcourir les neurones de la couche
    - i : index utilisé pour parcourir les neurones

    sorties ← allocation mémoire pour couche.nombre_neurones * Entier
    tempN ← NULL

    pour i = 0 à couche.nombre_neurones - 1 faire
        si i = 0 alors
            tempN ← couche.debutN
        fin si
        sorties[i] ← OutNeurone(tempN, Entry)
        tempN ← tempN.suivant
    fin pour
    OutCouche ← sorties
fin fonction

---

fonction CreateR(nombrecouches ← nombrecouches, Nneurone ← Nneurone, n_Entry ← n_Entry, poids ← poids, seuil ← seuil) : Reseau
    Entrées :
    - nombrecouches : entier représentant le nombre de couches dans le réseau
    - Nneurone : tableau d'entiers représentant le nombre de neurones dans chaque couche
    - n_Entry : entier représentant le nombre d'entrées pour chaque neurone
    - poids : tableau de tableaux d'entiers représentant les poids pour chaque neurone
    - seuil : tableau d'entiers représentant les seuils pour chaque neurone

    Résultat :
    - Un objet Reseau initialisé avec les couches et neurones définis

    Lexique :
    - R : réseau de neurones initialisé
    - couche : pointeur vers une couche du réseau
    - precedente : pointeur vers la couche précédente dans le réseau
    - i : index utilisé pour parcourir les couches
    - newcouche : pointeur vers une nouvelle couche initialisée

    R.debutC ← NULL
    R.finC ← NULL
    precedente ← NULL

    pour i = 0 à nombrecouches - 1 faire
        newcouche ← InitCouche(Nneurone[i], n_Entry, poids, seuil)
        si i = 0 alors
            R.debutC ← newcouche
        sinon
            precedente.suivante ← newcouche
            newcouche.precedente ← precedente
        fin si
        precedente ← newcouche
        n_Entry ← Nneurone[i]
    fin pour

    R.finC ← precedente
    CreateR ← R
fin fonction

---

fonction OutR(R ← R, Entry ← Entry, nombrecouches ← nombrecouches) : Entier*
    Entrées :
    - R : réseau de neurones à utiliser pour la propagation des entrées
    - Entry : tableau d'entiers représentant les entrées pour le réseau
    - nombrecouches : entier représentant le nombre de couches dans le réseau

    Résultat :
    - Retourne un tableau d'entiers représentant la sortie du réseau

    Lexique :
    - sorties : tableau représentant les sorties du réseau
    - couche : pointeur vers une couche du réseau
    - i : index utilisé pour parcourir les couches

    sorties ← Entry
    couche ← R.debutC

    pour i = 0 à nombrecouches - 1 faire
        sorties ← OutCouche(couche, sorties)
        couche ← couche.suivante
    fin pour
    OutR ← sorties
fin fonction

---

fonction Choix_Entry(Nentrer ← Nentrer, Entry ← Entry) : Vide
    Entrées :
    - Nentrer : entier représentant le nombre d'entrées à saisir
    - Entry : tableau d'entiers où les entrées seront stockées

    Résultat : 
    - Aucune valeur retournée, mais modifie le tableau Entry avec les entrées saisies

    Lexique :
    - reponse : variable de type char utilisée pour stocker la réponse de l'utilisateur
    - choix : variable utilisée pour valider la saisie de l'utilisateur
    - i : index utilisé pour parcourir les entrées

    pour i = 0 à Nentrer - 1 faire
        choix ← -1
        reponse ← 'a'
        faire
            afficher message pour demander une entrée
            saisir reponse
            choix ← convertir reponse en entier
        tant que choix ≠ 0 et choix ≠ 1
        Entry[i] ← choix
    fin pour
    Choix_Entry ← NULL
fin fonction

---

fonction menu() : Entier
    Entrées : 
    - Aucune

    Résultat : 
    - Retourne un entier représentant le choix du menu

    Lexique :
    - reponse : variable de type char utilisée pour stocker la réponse de l'utilisateur
    - choixmenu : entier représentant le choix sélectionné par l'utilisateur

    choixmenu ← 0
